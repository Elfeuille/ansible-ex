#!/usr/bin/python

import os
import sys
import pwd
import argparse
import json

script_home = os.path.dirname(os.path.abspath(__file__))
inventory_root = script_home + "/inventory"
roles_root = script_home + "/roles"
inventory_file = "hosts"
playbook_default = "site.yml"
private_key_default = "~/.ssh/ansible.key"

class Help:
	roles = []
	tags = []

	def __init__(self):
		self.roles = os.listdir(inventory_root)
		self.tags = os.listdir(roles_root)

	def classifier(self):
		return "specify classifier. ['" + "', '".join(self.roles) + "']"

	def tag(self):
		return "specify tags. (specify multipul by ',') ['" + "', '".join(self.tags) + "']"

	def user(self):
		return "specify remote user."

	def playbook(self):
		return "specify playbook. (default: %(default)s)"

	def key(self):
		return "specify ansible password file. (default: %(default)s)"

	def sshKey(self):
		return "specify private key file."

class CommandLine:
	command = ""

	def __init__(self, command):
		self.command = command

	def addParam(self, key, value):
		self.addCommand(" ".join([key, value]))

	def addCommand(self, value):
		self.command = self.command + " " + value

	def dump(self):
		print self.command

	def execute(self):
		return os.system(self.command)


if __name__ == '__main__':
	#	parse arguments
	help = Help()
	parser = argparse.ArgumentParser()
	parser.add_argument("-c", "--classifier", help = help.classifier(), required = True)
	parser.add_argument("-t", "--tags",       help = help.tag())
	parser.add_argument("-u", "--user",       help = help.user())
	parser.add_argument("-s", "--sshkey",     help = help.sshKey())
	parser.add_argument("-p", "--playbook",   help = help.playbook(), default = playbook_default)
	parser.add_argument("-k", "--key",        help = help.key(), default = private_key_default)
	args = parser.parse_args()

	#	decrypt inventory
	decrypt = CommandLine("ansible-vault")
	decrypt.addParam("decrypt", "/".join([inventory_root, args.classifier, inventory_file]))
	decrypt.addParam("--vault-password-file", args.key)
	decrypt.execute()

	#	execute ansible
	extra_vars = {}
	extra_vars["classifier"] = args.classifier
	if args.user:
		extra_vars["ansible_ssh_user"] = args.user

	command = CommandLine("ansible-playbook")
	command.addParam("-i", "/".join([inventory_root, args.classifier]))
	command.addCommand(script_home + "/" + args.playbook)
	command.addParam("--extra-vars", "'" + json.dumps(extra_vars) + "'")
	command.addParam("--vault-password-file", args.key)

	if args.tags:
		command.addParam("--tags", args.tags)
	if args.sshkey:
		command.addParam("--private-key", args.sshkey)
	command.execute()

	#	encrypt inventory
	encrypt = CommandLine("ansible-vault")
	encrypt.addParam("encrypt", "/".join([inventory_root, args.classifier, inventory_file]))
	encrypt.addParam("--vault-password-file", args.key)
	encrypt.execute()

